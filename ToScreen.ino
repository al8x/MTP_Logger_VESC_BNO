
//**************************************************************************************
//------------------------------- DISPLAY FUNCTIONS ------------------------------------
//**************************************************************************************

//http://javl.github.io/image2cpp/

// 'FiledLogg', 128x64px
const unsigned char FieldLogger[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xff, 0xf8, 0x00, 0x0f, 0xf8, 0x0f, 0xc0, 0x1f, 0xc7, 0x8f, 0xbf, 0xf7, 0xff, 0x80, 
  0x00, 0x01, 0xf0, 0xfc, 0x00, 0x0f, 0xfc, 0x3f, 0xf0, 0x3f, 0xe7, 0x8f, 0x3f, 0xf7, 0xff, 0x80, 
  0x00, 0x03, 0xe0, 0x7c, 0x00, 0x0f, 0x1e, 0x3c, 0xf8, 0x78, 0xe7, 0x9e, 0x3c, 0x00, 0x78, 0x00, 
  0x00, 0x03, 0xc0, 0x3e, 0x00, 0x0f, 0x1e, 0x78, 0x78, 0xf0, 0x27, 0xbc, 0x3c, 0x00, 0x78, 0x00, 
  0x00, 0x03, 0xc0, 0x1e, 0x00, 0x0f, 0x1e, 0x70, 0x3c, 0xe0, 0x07, 0xfc, 0x3c, 0x00, 0x78, 0x00, 
  0x00, 0x03, 0xc0, 0x1e, 0x00, 0x0f, 0x1e, 0xf0, 0x3d, 0xe0, 0x07, 0xf8, 0x3f, 0xf0, 0x78, 0x00, 
  0x00, 0x03, 0xc0, 0x3e, 0x00, 0x0f, 0x3e, 0xf0, 0x3d, 0xe0, 0x07, 0xf0, 0x3f, 0xf0, 0x78, 0x00, 
  0x00, 0x03, 0xe0, 0x3c, 0x00, 0x0f, 0xfc, 0xf0, 0x3d, 0xe0, 0x07, 0xf8, 0x3c, 0x00, 0x78, 0x00, 
  0x00, 0x01, 0xf0, 0x7c, 0x00, 0x0f, 0xf8, 0xf0, 0x3d, 0xe0, 0x07, 0xf8, 0x3c, 0x00, 0x78, 0x00, 
  0x00, 0x01, 0xff, 0xf8, 0x00, 0x0f, 0x00, 0x70, 0x3c, 0xe0, 0x07, 0xbc, 0x3c, 0x00, 0x78, 0x00, 
  0x00, 0x00, 0xff, 0xf8, 0x00, 0x0f, 0x00, 0x78, 0x78, 0xf0, 0x27, 0xbe, 0x3c, 0x00, 0x78, 0x00, 
  0x00, 0x00, 0x7f, 0xf0, 0x00, 0x0f, 0x00, 0x3c, 0xf8, 0x78, 0xe7, 0x9e, 0x3c, 0x00, 0x78, 0x00, 
  0x00, 0x00, 0x3f, 0xc0, 0x00, 0x0f, 0x00, 0x3f, 0xf0, 0x7f, 0xe7, 0x8f, 0x3f, 0xf0, 0x78, 0x00, 
  0x00, 0x01, 0x8f, 0x08, 0x00, 0x0f, 0x00, 0x0f, 0xc0, 0x1f, 0xc7, 0x8f, 0xbf, 0xf0, 0x78, 0x00, 
  0x00, 0x01, 0xe0, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xe0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xe0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xc0, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xc0, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x07, 0xc0, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x07, 0x80, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0f, 0x80, 0x1f, 0x00, 0x01, 0xe0, 0x1f, 0xc0, 0x7f, 0x03, 0xf8, 0xff, 0xbf, 0xe0, 0x00, 
  0x00, 0x0f, 0x80, 0x0f, 0x00, 0x01, 0xe0, 0x3f, 0xe0, 0xff, 0x8f, 0xfc, 0xff, 0xbf, 0xf0, 0x00, 
  0x00, 0x0f, 0x00, 0x0f, 0x80, 0x01, 0xe0, 0x78, 0xf1, 0xe3, 0x9f, 0x1c, 0xe0, 0x3c, 0xf0, 0x00, 
  0x00, 0x1f, 0x00, 0x0f, 0x80, 0x01, 0xe0, 0x70, 0x73, 0xc0, 0x9e, 0x04, 0xe0, 0x3c, 0x70, 0x00, 
  0x00, 0x1e, 0x00, 0x07, 0xc0, 0x01, 0xe0, 0x70, 0x7b, 0x80, 0x1c, 0x00, 0xff, 0x3c, 0x70, 0x00, 
  0x00, 0x1e, 0x00, 0x07, 0xc0, 0x01, 0xe0, 0xf0, 0x7b, 0x9f, 0xbc, 0xfc, 0xff, 0x3c, 0xf0, 0x00, 
  0x00, 0x3e, 0x00, 0x03, 0xc0, 0x01, 0xe0, 0xf0, 0x7b, 0x9f, 0xbc, 0xfc, 0xe0, 0x3f, 0xe0, 0x00, 
  0x00, 0x3c, 0x00, 0x03, 0xe0, 0x01, 0xe0, 0x70, 0x7b, 0x83, 0x9c, 0x3c, 0xe0, 0x3f, 0xc0, 0x00, 
  0x00, 0x7c, 0x00, 0x01, 0xe0, 0x01, 0xe0, 0x70, 0x73, 0xc3, 0x9e, 0x3c, 0xe0, 0x3d, 0xe0, 0x00, 
  0x00, 0x7c, 0x00, 0x01, 0xe0, 0x01, 0xe0, 0x78, 0xf1, 0xe3, 0x9f, 0x3c, 0xe0, 0x3c, 0xf0, 0x00, 
  0x00, 0x78, 0x00, 0x01, 0xf0, 0x01, 0xff, 0x3f, 0xe1, 0xff, 0x8f, 0xfc, 0xff, 0xbc, 0x78, 0x00, 
  0x00, 0xf8, 0x00, 0x00, 0xf0, 0x01, 0xff, 0x1f, 0xc0, 0x7f, 0x03, 0xf8, 0xff, 0xbc, 0x7c, 0x00, 
  0x00, 0xf8, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xf0, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0xf0, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0xf0, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0xe0, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0xe0, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0xc0, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0x80, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 'SerialStream', 128x64px
const unsigned char epd_bitmap_SerialStream [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x3f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x70, 0x00, 0x00, 0xc0, 0x00, 0x3f, 0xe0, 0x7f, 0xc1, 0xff, 0x03, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0x60, 0x00, 0x00, 0x60, 0x00, 0x3f, 0xe0, 0x7f, 0xc1, 0xff, 0x03, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0x67, 0x6d, 0xb6, 0x60, 0x00, 0x3f, 0xe0, 0x7f, 0x80, 0xff, 0x03, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0x67, 0x6d, 0xb6, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x67, 0x6d, 0xb6, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x67, 0x6d, 0xb6, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x67, 0x6d, 0xb6, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x60, 0x6d, 0xb6, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x60, 0x00, 0x00, 0x60, 0x00, 0x3f, 0xff, 0xff, 0x80, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0x60, 0x00, 0x00, 0x60, 0x00, 0x3f, 0xff, 0xff, 0xc1, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0x60, 0x00, 0x00, 0x60, 0x00, 0x3f, 0xff, 0xff, 0x80, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0x60, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xc0, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xc0, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0x80, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0x80, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xc0, 0x00, 0x00, 0x60, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xe0, 0x00, 0x00, 0x60, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xe0, 0x00, 0x00, 0x60, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0x60, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xe0, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xc0, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0x80, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0x80, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0x80, 0x00, 0x00, 0x60, 0x00, 0x3f, 0xff, 0xff, 0x80, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x01, 0x80, 0x00, 0x00, 0x60, 0x00, 0x3f, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x01, 0x80, 0x00, 0x00, 0x60, 0x00, 0x3f, 0xff, 0xff, 0x80, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x01, 0x80, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0x80, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0x80, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0x80, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0x80, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xc0, 0x00, 0x01, 0xe0, 0x00, 0x3f, 0xe0, 0x7f, 0x80, 0xff, 0x03, 0xfe, 0x00, 0x00, 
  0x00, 0x01, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x3f, 0xe0, 0x7f, 0xc0, 0xff, 0x03, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0x7f, 0xff, 0xff, 0x80, 0x00, 0x3f, 0xe0, 0x7f, 0xc0, 0xff, 0x03, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x30, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xc0, 0x00, 0x30, 0x06, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0x20, 0x00, 0x00, 0x06, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0x03, 0xc7, 0xb3, 0xc6, 0x03, 0xbe, 0xf3, 0xc7, 0x87, 0xdc, 0x67, 0xc3, 0xe0, 0x00, 
  0x00, 0x03, 0x86, 0x66, 0x34, 0x66, 0x06, 0x18, 0xc6, 0x68, 0xc6, 0x66, 0x66, 0x66, 0xc0, 0x00, 
  0x00, 0x01, 0xc6, 0x66, 0x30, 0x66, 0x07, 0x18, 0xc6, 0x60, 0xc6, 0x66, 0x66, 0x66, 0xc0, 0x00, 
  0x00, 0x00, 0xe7, 0xe6, 0x33, 0xe6, 0x03, 0x98, 0xc7, 0xe7, 0xc6, 0x66, 0x66, 0x66, 0xc0, 0x00, 
  0x00, 0x00, 0x66, 0x06, 0x36, 0x66, 0x01, 0x98, 0xc6, 0x0c, 0xc6, 0x66, 0x66, 0x63, 0x80, 0x00, 
  0x00, 0x02, 0x66, 0x26, 0x36, 0x66, 0x01, 0x98, 0xc6, 0x2c, 0xc6, 0x66, 0x66, 0x66, 0x00, 0x00, 
  0x00, 0x01, 0xc3, 0xc6, 0x33, 0xe6, 0x07, 0x0e, 0xc3, 0xc7, 0xc6, 0x66, 0x66, 0x63, 0xc0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x60, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x60, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 'MultiIcon', 128x64px
const unsigned char epd_bitmap_MultiIcon [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x11, 0xcf, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0a, 0xaa, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x19, 0xcf, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0a, 0xaa, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x19, 0xcf, 0xc0, 0x3e, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0a, 0xaa, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x1d, 0xe7, 0xc0, 0x7e, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0a, 0xaa, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x0d, 0xe7, 0xc0, 0x7e, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x08, 0xaa, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x0c, 0xe7, 0xe0, 0xfc, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x0c, 0xf7, 0xe0, 0xfc, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x06, 0xf3, 0xe0, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x18, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x06, 0x73, 0xf1, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x30, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x06, 0x7b, 0xf1, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x07, 0x79, 0xf3, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x30, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x03, 0x39, 0xf3, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x10, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x03, 0x39, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x30, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3d, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x01, 0xbc, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x01, 0x9c, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x01, 0x9e, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x3f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1b, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1b, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x5b, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x07, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x06, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x02, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x5b, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xc1, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xc3, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x5b, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xc0, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xfe, 0x6f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xfe, 0x6f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x31, 0x80, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x33, 0x03, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xec, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x26, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xe4, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0xf6, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0xf6, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0xf6, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x03, 0xe6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xe4, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 'Arrow', 19x10px
const unsigned char epd_bitmap_Arrow [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x1c, 0x00, 0x7f, 0xfe, 0x00, 0x7f, 0xff, 0x80, 0x7f, 
  0xff, 0x80, 0x7f, 0xfe, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00
};

// 'LandingPage', 128x64px
const unsigned char epd_bitmap_LandingPage [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf8, 
  0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 
  0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x0c, 
  0x17, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0xff, 0xff, 0xec, 
  0x17, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0xff, 0xff, 0xec, 
  0x17, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0xff, 0xff, 0xec, 
  0x17, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0xff, 0xff, 0xec, 
  0x17, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0xff, 0xff, 0xec, 
  0x17, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0xff, 0xff, 0xec, 
  0x17, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0xff, 0xff, 0xec, 
  0x17, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0xff, 0xff, 0xec, 
  0x17, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0xff, 0xff, 0xec, 
  0x17, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x0c, 
  0x17, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 
  0x17, 0x40, 0x3f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf8, 
  0x17, 0x40, 0x6c, 0xd1, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x17, 0x40, 0xc1, 0x04, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x17, 0x40, 0x9b, 0x76, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x17, 0x40, 0xbb, 0x76, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x17, 0x40, 0xbb, 0x76, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x17, 0x40, 0xbb, 0x76, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x17, 0x40, 0xbb, 0x76, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x17, 0x40, 0x93, 0x64, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x17, 0x40, 0xc0, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x17, 0x40, 0x80, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x17, 0x41, 0x80, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x17, 0x43, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x17, 0x42, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x17, 0x42, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x17, 0x43, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x17, 0x41, 0x80, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x17, 0x41, 0x80, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x17, 0x41, 0x80, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x17, 0x43, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x17, 0x43, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x17, 0x42, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x17, 0x42, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x17, 0x42, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x17, 0x42, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x17, 0x42, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x17, 0x42, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x17, 0x42, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x10, 0x43, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x1f, 0xc3, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 'FileTransfer', 128x64px
const unsigned char epd_bitmap_FileTransfer [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x07, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0e, 0x00, 0x00, 0x18, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 
  0x00, 0x0c, 0x00, 0x00, 0x0c, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 
  0x00, 0x0c, 0xed, 0xb6, 0xcc, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 
  0x00, 0x0c, 0xed, 0xb6, 0xcc, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 
  0x00, 0x0c, 0xed, 0xb6, 0xcc, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 
  0x00, 0x0c, 0xed, 0xb6, 0xcc, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 
  0x00, 0x0c, 0xed, 0xb6, 0xcc, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 
  0x00, 0x0c, 0x0d, 0xb6, 0xcc, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 
  0x00, 0x0c, 0x00, 0x00, 0x0c, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0xff, 0xff, 0x00, 
  0x00, 0x0c, 0x00, 0x00, 0x0c, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0xff, 0xff, 0x00, 
  0x00, 0x0c, 0x00, 0x00, 0x0c, 0x01, 0x80, 0x00, 0x00, 0x38, 0x00, 0x00, 0x3b, 0xff, 0xff, 0x00, 
  0x00, 0x0c, 0x00, 0x00, 0x0c, 0x01, 0x80, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x3b, 0xff, 0x1f, 0x00, 
  0x00, 0x18, 0x00, 0x00, 0x0c, 0x01, 0x80, 0x00, 0x7f, 0xfc, 0x00, 0x00, 0x3b, 0xff, 0x1f, 0x00, 
  0x00, 0x38, 0x00, 0x00, 0x0c, 0x01, 0x80, 0x00, 0xc0, 0x38, 0x00, 0x00, 0x3b, 0xff, 0x1f, 0x00, 
  0x00, 0x30, 0x00, 0x00, 0x0c, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x3b, 0xff, 0x1f, 0x00, 
  0x00, 0x30, 0x00, 0x00, 0x0c, 0x01, 0x83, 0x83, 0x00, 0x00, 0x00, 0x80, 0x3b, 0xff, 0x1f, 0x00, 
  0x00, 0x38, 0x00, 0x00, 0x0c, 0x01, 0x87, 0xc7, 0x00, 0x00, 0x00, 0xe0, 0x3b, 0xff, 0x1f, 0x00, 
  0x00, 0x1c, 0x00, 0x00, 0x0c, 0x01, 0x87, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3b, 0xff, 0xff, 0x00, 
  0x00, 0x1c, 0x00, 0x00, 0x0c, 0x01, 0x87, 0xc0, 0x0e, 0x00, 0x00, 0xe0, 0x3b, 0xff, 0xff, 0x00, 
  0x00, 0x0c, 0x00, 0x00, 0x0c, 0x01, 0x83, 0x80, 0x06, 0x00, 0x00, 0x80, 0x3b, 0xff, 0x1f, 0x00, 
  0x00, 0x1c, 0x00, 0x00, 0x0c, 0x01, 0x80, 0x00, 0x03, 0x00, 0x00, 0x00, 0x3b, 0xff, 0x1f, 0x00, 
  0x00, 0x38, 0x00, 0x00, 0x0c, 0x01, 0x80, 0x00, 0x01, 0x80, 0x00, 0x00, 0x3b, 0xff, 0x1f, 0x00, 
  0x00, 0x30, 0x00, 0x00, 0x0c, 0x01, 0x80, 0x00, 0x00, 0xe1, 0xc0, 0x00, 0x3b, 0xff, 0x1f, 0x00, 
  0x00, 0x30, 0x00, 0x00, 0x0c, 0x01, 0x80, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x3b, 0xff, 0x1f, 0x00, 
  0x00, 0x30, 0x00, 0x00, 0x0c, 0x01, 0x80, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x3b, 0xff, 0x1f, 0x00, 
  0x00, 0x30, 0x00, 0x00, 0x0c, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0xff, 0xff, 0x00, 
  0x00, 0x30, 0x00, 0x00, 0x0c, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0xff, 0xff, 0x00, 
  0x00, 0x30, 0x00, 0x00, 0x0c, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0xff, 0xff, 0x00, 
  0x00, 0x30, 0x00, 0x00, 0x0c, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 
  0x00, 0x30, 0x00, 0x00, 0x0c, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 
  0x00, 0x30, 0x00, 0x00, 0x0c, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 
  0x00, 0x30, 0x00, 0x00, 0x1c, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 
  0x00, 0x38, 0x00, 0x00, 0x3c, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 
  0x00, 0x3f, 0xff, 0xff, 0xf8, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 
  0x00, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x3f, 0x66, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x30, 0x06, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 
  0x00, 0x30, 0x66, 0x3c, 0x70, 0x7d, 0xef, 0x0f, 0x87, 0x78, 0xf3, 0xc0, 0x00, 0x03, 0x80, 0x00, 
  0x00, 0x30, 0x66, 0x66, 0xc0, 0x31, 0x91, 0x8c, 0xcc, 0x31, 0x9b, 0x00, 0x0f, 0xff, 0xc0, 0x00, 
  0x00, 0x3e, 0x66, 0x66, 0xe0, 0x31, 0x81, 0x8c, 0xce, 0x31, 0x9b, 0x00, 0x0f, 0xff, 0xf0, 0x00, 
  0x00, 0x30, 0x66, 0x7e, 0x70, 0x31, 0x8f, 0x8c, 0xc7, 0x31, 0xfb, 0x00, 0x0f, 0xff, 0xf0, 0x00, 
  0x00, 0x30, 0x66, 0x60, 0x30, 0x31, 0x99, 0x8c, 0xc3, 0x31, 0x83, 0x00, 0x0f, 0xff, 0xc0, 0x00, 
  0x00, 0x30, 0x66, 0x62, 0x30, 0x31, 0x99, 0x8c, 0xc3, 0x31, 0x8b, 0x00, 0x00, 0x03, 0x80, 0x00, 
  0x00, 0x30, 0x66, 0x3c, 0xe0, 0x1d, 0x8f, 0x8c, 0xce, 0x30, 0xf3, 0x00, 0x00, 0x02, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 'FileConversion', 128x64px
const unsigned char epd_bitmap_FileConversion [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x03, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x06, 0x00, 0x00, 
  0x00, 0x07, 0xc0, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x03, 0x00, 0x00, 
  0x00, 0x07, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x03, 0x00, 0x00, 
  0x00, 0x06, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x03, 0x00, 0x00, 
  0x00, 0x06, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x03, 0x00, 0x00, 
  0x00, 0x06, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x03, 0x00, 0x00, 
  0x00, 0x06, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x03, 0x00, 0x00, 
  0x00, 0x06, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x03, 0x00, 0x00, 
  0x00, 0x06, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x03, 0x00, 0x00, 
  0x00, 0x06, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x03, 0x00, 0x00, 
  0x00, 0x06, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x03, 0x00, 0x00, 
  0x00, 0x06, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x03, 0x00, 0x00, 
  0x00, 0x06, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x03, 0x00, 0x00, 
  0x00, 0x06, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x03, 0x00, 0x00, 
  0x00, 0x06, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x03, 0x00, 0x00, 
  0x00, 0x06, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x03, 0x00, 0x00, 
  0x00, 0x06, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x03, 0x00, 0x00, 
  0x00, 0x06, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x03, 0x00, 0x00, 
  0x00, 0x06, 0x06, 0x0c, 0x01, 0x80, 0x00, 0x00, 0x40, 0x00, 0x0c, 0x00, 0x00, 0x03, 0x00, 0x00, 
  0x00, 0x06, 0x06, 0x0c, 0x01, 0x80, 0x00, 0x00, 0x70, 0x00, 0x0c, 0x00, 0x00, 0x03, 0x00, 0x00, 
  0x00, 0x06, 0x06, 0x00, 0x01, 0x80, 0x01, 0xff, 0xf8, 0x00, 0x0c, 0x07, 0x1d, 0xb3, 0x00, 0x00, 
  0x00, 0x06, 0x07, 0xcd, 0xf1, 0x80, 0x01, 0xff, 0xfe, 0x00, 0x0c, 0x0c, 0x31, 0xb3, 0x00, 0x00, 
  0x00, 0x06, 0x06, 0x6d, 0x99, 0x80, 0x01, 0xff, 0xfe, 0x00, 0x0c, 0x0c, 0x39, 0xb3, 0x00, 0x00, 
  0x00, 0x06, 0x06, 0x6d, 0x99, 0x80, 0x01, 0xff, 0xf8, 0x00, 0x0c, 0x0c, 0x1c, 0xa3, 0x00, 0x00, 
  0x00, 0x06, 0x06, 0x6d, 0x99, 0x80, 0x00, 0x00, 0x70, 0x00, 0x0c, 0x6c, 0x0c, 0xe3, 0x00, 0x00, 
  0x00, 0x06, 0x66, 0x6d, 0x99, 0x80, 0x00, 0x00, 0x40, 0x00, 0x0c, 0x67, 0x38, 0xe3, 0x00, 0x00, 
  0x00, 0x06, 0x67, 0xcd, 0x99, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x03, 0x00, 0x00, 
  0x00, 0x06, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x03, 0x00, 0x00, 
  0x00, 0x06, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x03, 0x00, 0x00, 
  0x00, 0x06, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x03, 0x00, 0x00, 
  0x00, 0x06, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x03, 0x00, 0x00, 
  0x00, 0x06, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x07, 0x00, 0x00, 
  0x00, 0x03, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0x00, 0x00, 
  0x00, 0x03, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xfc, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


//**************************************************************************************
//------------------------------- END BITMAP  ------------------------------------
//---------- FieldLogger
//---------- epd_bitmap_Arrow
//---------- epd_bitmap_MultiIcon
//---------- epd_bitmap_LandingPage
//----------- epd_bitmap_FileTransfer 
//---------- epd_bitmap_FileConversion 
//---------- epd_bitmap_SerialStream 
//**************************************************************************************

void ScreenLogo(int duration){
  display.drawBitmap(0,0,FieldLogger, 128, 64, WHITE); //display.drawBitmap(topLeftX, topLeftY, imageData, width, height, color)
  display.setCursor(0,0);
  display.display();
  delay(duration);
  display.clearDisplay();
}

void Screen_USB_Transfer(){
  display.drawBitmap(0,0,epd_bitmap_FileTransfer, 128, 64, WHITE); 
  display.setCursor(0,0);
  display.display();
  display.clearDisplay();
}

void Screen_dumpingFile(){
  display.drawBitmap(0,0,epd_bitmap_SerialStream, 128, 64, WHITE); 
  display.setCursor(0,0);
  display.display();
  display.clearDisplay();
}


void ScreenCheckStatusOne (int duration){
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.drawBitmap(0,0,epd_bitmap_MultiIcon, 128, 64, WHITE); //display.drawBitmap(topLeftX, topLeftY, imageData, width, height, color)
  display.setCursor(38,12);

  if (carteSdIn){
    display.println( "OK");
  }
  else{
    display.println( "NONE");
  }
  
  display.setCursor(0,0);
  display.display();
  delay(duration);
}

void ScreenCheckStatusTwo(int duration){
  display.setTextSize(1);
  display.setCursor(38,40);
  
  if (imuDetected){
    display.println("OK");
  }
  else{
    display.println( "NONE");
  }
 
  display.setCursor(0,0);
  display.display();
  delay(duration);  
}

void ScreenCheckStatusThree(int duration){
  display.setTextSize(1);
  display.setCursor(100,12);

  if (vescConnection){
    display.println( "OK");
  }
  else{
    display.println( "NONE");
  }

  display.setCursor(0,0);
  display.display();
  delay(duration);
}

void ScreenCheckStatusFour(int duration){
  display.setTextSize(1);
  display.setCursor(100,40);

  if (thermocoupleDetected){
    display.println( "OK");
  }
  else{
    display.println( "NONE");
  }
  
  display.drawBitmap(108,54,epd_bitmap_Arrow, 19, 10, WHITE); //display.drawBitmap(topLeftX, topLeftY, imageData, width, height, color)
  
  display.setCursor(0,0);
  display.display();
  delay(duration);
  display.clearDisplay();
  
}

void displayPopUpMessage(char message[], int duration){

  display.fillRect(10, 15, 124-(10*2), 64-(15*2), WHITE);
  display.fillRect(13, 18, 124-(13*2), 64-(18*2), BLACK);
  
  display.setCursor(23,24);
  display.print(message);

  display.display();
  delay(duration);
  display.clearDisplay();
  
}


void LoadingAnimation(int duration){
  // Loading animation lasting DURATION ms to give VESC and other component time to conect

  int initTime = millis();
  int currentTime = millis()-initTime;

  display.setTextSize(1);
  display.setTextColor(WHITE);

  display.setCursor(0,0);
  display.display();

  while (currentTime<duration){
    display.fillRect(0, 53, ((currentTime*128)/duration), 10, WHITE);
    display.display();
    currentTime = millis()-initTime;
  }
  
  display.setCursor(0,0);
  display.clearDisplay(); 
  
}

void thermocoupleGraph_Screen(){

  int status = thermocouple.read();  
  if (status == STATUS_NO_COMMUNICATION)
  {
    DEBUGSERIAL.println("MAX 31855 NO COMMUNICATION");
  }

  float tempTemp = thermocouple.getTemperature();
  DEBUGSERIAL.print(millis());
  DEBUGSERIAL.print(" ");
  DEBUGSERIAL.println(tempTemp);

  WideGraph(tempTemp,10,0,0,48);
  display.setTextColor(BLACK);
  display.fillRect(40, 0, 45, 10, WHITE);
  display.setCursor(42,1);
  display.print("MAX31855");
  
  display.setCursor(0,55);
  display.setTextColor(WHITE);

  if (carteSdIn){
    display.print("//    -----o  FastLog");
  }
  else{
    display.print("//    -----o      *  ");
  }
 
  display.drawLine(0, 50, 128, 50, WHITE);
  display.display();
  display.clearDisplay();
  
}

void ScreenThermocouple(bool recording){

    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.println("     -MAX31855-");
    display.println("   Temperature ");
    display.println(" ");

    int status = thermocouple.read();    
    if (status == STATUS_NO_COMMUNICATION)
    {
      DEBUGSERIAL.println("MAX 31855 NO COMMUNICATION");
    }

    float tempTemp = (thermocouple.getTemperature());
    
    if (!recording){
      DEBUGSERIAL.print(millis());
      DEBUGSERIAL.print(" ");
      DEBUGSERIAL.println(tempTemp);
    }
    
    display.setCursor(10,20);
    display.setTextSize(3);

    if (tempTemp>=100){
      display.print(int(tempTemp));
    }
    else{
      display.print(tempTemp);
    }

    display.setCursor(100,20);
    display.setTextSize(1);
    display.print("o");
    display.setCursor(100,20);
    display.setTextSize(2);
    display.print(" C ");

    display.setTextSize(1);
    display.drawLine(0, 50, 128, 50, WHITE);
    display.setCursor(0,55); 

    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.setCursor(0,55);
    if (carteSdIn&&recording){
          display.print("                STOP");
    }
    else if (carteSdIn){
      display.print("/     -----o    T-Log");
    }
    else{
      display.print("/     -----o      *  ");
    }
   
    display.setCursor(0,0);
    display.drawLine(0, 50, 128, 50, WHITE);
    display.display();
    display.clearDisplay();
    
}

void ScreenAnalogAccelero(){
  int coordX = analogRead(ACCELERO_X_PIN) ;
  int coordY = analogRead(ACCELERO_Y_PIN) ;
  int coordZ = analogRead(ACCELERO_Z_PIN) ;

  int resolutionMapping = pow(2,RESOLUTION_ADC);

  display.println("Accelero");
  display.println("");
  display.print("x ");
  display.println(coordX);
  display.print("y ");
  display.println(coordY);
  display.print("z ");
  display.println(coordZ);
  
  coordX = map(coordX,0,resolutionMapping,-25,25);
  coordY = map(coordY,0,resolutionMapping,-25,25);
  coordZ = map(coordZ,0,resolutionMapping,0,50);

  display.drawCircle(70, 25, 25, WHITE);
  display.drawLine(70, 25,70+coordY,25-coordX, WHITE);

  if (coordZ>25){
    display.fillRect(105, (50-coordZ), 10, (coordZ-25), WHITE);
  }
  else{
    display.fillRect(105, 25, 10, (25-coordZ), WHITE);
  }
  
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0,55);
  if (carteSdIn){
        display.print(" /    -----o  FastLog");
  }
  else{
    display.print(" /    -----o      *  ");
  }
 
  display.setCursor(0,0);
  display.drawLine(0, 50, 128, 50, WHITE);
  display.display();
  display.clearDisplay(); 
}

void Screen_AreYouSure(){
  // Ecran ou on règle la fréquence d'aquisition
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.println("      FORMAT SD ");

    display.println("");
    display.print("This action will erease all of your data. Continue ? ");


    display.drawLine(0, 50, 128, 50, WHITE);
    
    display.setTextSize(1);
    display.println("");
    display.println("");
    display.println("");
    
    display.print("NO        *       YES");
    
    display.setCursor(0,0);
    display.display();
    display.clearDisplay();
}

void PasDeCarteSD(){
  //Si pas de carte SD, on ne fait rien
  // Ecran de pret à mesurer
    display.setTextSize(2);
    display.println("");
    display.setTextColor(WHITE);
    display.println("   NO SD");
    display.setTextSize(1);
    display.println("Please, shutdown the logger and insert or verify your sd card");
    display.println("");
    display.println("");
    display.setCursor(0,0);
    display.display();
    display.clearDisplay();  
  }

void screenGeneralSetting(int choice){
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.println("");
    display.setTextSize(1);

    if (choice==0){
      display.setTextColor(BLACK);
      display.fillRect(0, 4, 128, 16, WHITE);
    }
    display.print(" Frequency - ");
    display.print(1000000/LOG_INTERVAL_USEC);
    display.println(" Hz");
    display.println("");
    display.setTextColor(WHITE);
    
    if (choice==1){
      display.setTextColor(BLACK);
      display.fillRect(0, 20, 128, 16, WHITE);
    }
 
    display.print(" Wheel diameter ");
    display.print(ListeDeDiametrePossible[RangDiametre]);
    display.println("mm");
    display.println("");
    display.setTextColor(WHITE);
    
    if (choice==2){
      display.setTextColor(BLACK);
      display.fillRect(0, 36, 128, 16, WHITE);
    }

    display.print(" Number of magnet ");
    display.print(nbAimentSurRoue);
    display.setTextColor(WHITE);
    
    display.drawLine(0, 50, 128, 50, WHITE);
    
    display.setTextSize(1);
    display.setCursor(0,55);
    display.print(" ////    Set     Next");
    
    display.setCursor(0,0);
    display.display();
    display.clearDisplay();
}


void ScreenChooseNbMagnet(){
  // Ecran ou on règle la fréquence d'aquisition
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.println("Magnets on the wheel");
    display.setTextSize(2);
    display.println("");
    display.print("     ");
    display.print(nbAimentSurRoue);
    display.println("");

    display.drawLine(0, 50, 128, 50, WHITE);
    
    display.setTextSize(1);
    display.println("");
    display.println("");
    
    display.print("Less     OK     More");
    
    display.setCursor(0,0);
    display.display();
    display.clearDisplay();
}
void ScreenChooseDiameter (){
  // Ecran ou on règle la fréquence d'aquisition
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.println("    Wheel diameter ");
    display.setTextSize(2);
    display.println("");
    display.print("  ");
    display.print(ListeDeDiametrePossible[RangDiametre]);
    display.print(" mm");
    display.println("");

    display.drawLine(0, 50, 128, 50, WHITE);
    
    display.setTextSize(1);
    display.println("");
    display.println("");
    
    display.print("Less     OK     More");
    
    display.setCursor(0,0);
    display.display();
    display.clearDisplay();
}


void ScreenChooseFrequency(){
  // Ecran ou on règle la fréquence d'aquisition
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.println("  Frequency settings ");
    display.setTextSize(2);
    display.println("");
    display.print("  ");
    display.print(1000000/LOG_INTERVAL_USEC);
    display.print(" Hz");
    display.println("");

    
    display.drawLine(0, 50, 128, 50, WHITE);
    
    display.setTextSize(1);
    display.println("");
    display.println("");
    
    display.print("Less     OK     More");
    
    display.setCursor(0,0);
    display.display();
    display.clearDisplay();
  
}

void SentenceOnScreen(char Sentence[]){
  // Show for one second a sentence that need to be displayed
   display.setTextSize(1);
   display.setTextColor(WHITE);
   display.println(Sentence);
   display.setCursor(0,0);
   display.display();
   display.clearDisplay();
   delay(1000);
}

void Aquisition(char ModeInput[], char FileName[]){
  // Ecran de pret à mesurer
    display.setTextSize(2);
    display.setTextColor(WHITE);
    display.setCursor(20,2);
    display.print("LOGGING");
    display.setTextSize(1);
    display.setCursor(28,17);
    display.println(ModeInput);

    display.setCursor(0,30);
    display.print("Started at ");
    digitalTimeDisplay();
    
    display.setCursor(0,40);
    display.print("Name : ");
    display.print(FileName);
    
    display.drawLine(0, 50, 128, 50, WHITE);
    display.setCursor(0,55);
    display.print(" *        *     Stop ");
    display.setCursor(0,0);
    display.display();
    display.clearDisplay();
}



void Analogs_RedirectingScreen(){
  switch (AnalogMode) {
    case 0:
      ScreenAnalogAccelero();
      AnalogAccelero_BluetoothSend();
      break;
    case 1:
      SensorsFFT_Screen();
      break;
  }
}

void Thermocouple_RedirectingScreen(){
  switch (AnalogMode) {
    case 0:
      ScreenThermocouple(false);
      //AnalogAccelero_BluetoothSend(); TODO
      break;
    case 1:
      thermocoupleGraph_Screen();
      break;
  }
}

void SensorsFFT_Screen(){

  display.setTextColor(BLACK);
//  display.fillRect(40, 0, 45, 10, WHITE);
  display.setCursor(30,1);
  display.setTextColor(WHITE);
  display.print(" FFT ");

  display.setCursor(0,55);

  display.print(" //   -----o   ");

  switch (FFT_GraphSelector) {
    case 0:
      display.print(" X");
      FFT_Graph(ACCELERO_X_PIN);
      break;
    case 1:
      display.print(" Y");
      FFT_Graph(ACCELERO_Y_PIN);
      break;
    case 2:
      display.print(" Z");
      FFT_Graph(ACCELERO_Z_PIN);
      break;
    case 3:
      display.print(" A6");
      FFT_Graph(ANALOG_ONE_PIN);
      break;
    case 4:
      display.print(" A7");
      FFT_Graph(ANALOG_TWO_PIN);
      break;
  }

  display.setCursor(0,0);
  display.drawLine(0, 50, 128, 50, WHITE);
  display.display();
  display.clearDisplay();  
}

void Sensors_RedirectingScreen(){
  switch (SensorsMode) {
    case 0:
      SensorsScreen();
      break;
    case 1:
      SensorsAmplif_1_Screen();
      break;
    case 2:
      SensorsAmplif_2_Screen();
      break;
//    case 3:
//      SensorsAnalog_Screen();
//      break;
    case 3:
      generalSettings();   // Can change some setting linked to that mode like frequency and and wheel size
      SensorsMode+= 1;
      SensorsMode= (SensorsMode%nbSensorsMode); // We must add this reset mode since generalSetting function lock you inside
      break;
  }
}

void SensorsAmplif_1_Screen(){

  WideGraph(readADC(0),10,0,0,48);
  display.setTextColor(BLACK);
  display.fillRect(40, 0, 45, 10, WHITE);
  display.setCursor(42,1);
  display.print("Ampli A");
  
  display.setCursor(0,55);
  display.setTextColor(WHITE);

  if (carteSdIn){
    display.print(" //   -o----  FastLog");
  }
  else{
    display.print(" //   -o----      *  ");
  }
 
  display.drawLine(0, 50, 128, 50, WHITE);
  display.display();
  display.clearDisplay();
}

void SensorsAmplif_2_Screen(){

  WideGraph(readADC(1),10,0,0,48);
  display.setTextColor(BLACK);
  display.fillRect(40, 0, 45, 10, WHITE);
  display.setCursor(42,1);
  display.print("Ampli B");
  display.setTextColor(WHITE);
  display.setCursor(0,55);

  if (carteSdIn){
    display.print(" ///  -o----  FastLog");
  }
  else{
    display.print(" ///  -o----      *  ");
  }
 
  display.drawLine(0, 50, 128, 50, WHITE);
  display.display();
  display.clearDisplay();
}



void SensorsScreen(){
  // Screen data and help to calibrate the sensors
  int TemporarySum=0;
  
  for (int i = 0; i < 10; i++){
    TemporarySum+=readADC(0);
    delay(1);
  }
  
  int temporarValue= TemporarySum/10;
  display.setTextSize(1);
  display.setTextColor(WHITE);
  
  display.setCursor(20,0);
  display.print(temporarValue);
  
  display.fillRect(5,50-((temporarValue*50)/4096),12,((temporarValue*50)/4096), WHITE);
  
  if (temporarValue>2048){
    display.drawLine(5, 25, 17, 25, BLACK);
  }
  else{
    display.drawLine(5, 25, 17, 25, WHITE);
  }

  //--------------First part of the screen
  TemporarySum=0;
  for (int i = 0; i < 10; i++){
    TemporarySum+=readADC(1);
    delay(1);
  }
  temporarValue= TemporarySum/10;
  
  display.fillRect(110,50-((temporarValue*50)/4096),12,((temporarValue*50)/4096), WHITE);
  
  if (temporarValue>2048){
    display.drawLine(110, 25, 123, 25, BLACK);
  }
  else{
    display.drawLine(110, 25, 123, 25, WHITE);
  }
  
  display.setCursor(78,0);
  display.print(temporarValue);
  
//---------------------------------
  
  if (digitalRead(HALL_SENSOR_ONE_PIN)){
    display.fillRect(25, 15, 20, 8, WHITE);
  }

  if (digitalRead(HALL_SENSOR_TWO_PIN)){
    display.fillRect(55, 15, 20, 8, WHITE);
  }

  if (digitalRead(HALL_SENSOR_SPEED_PIN)){
    display.fillRect(85, 15, 20, 8, WHITE);
  }

  display.setCursor(35,30);
  display.print(currentSpeed);
  display.setCursor(60,30);
  display.print(" km/h");
  display.setTextColor(WHITE);

  //---------------------------------

  
  display.setCursor(30,42);
  display.print(analogRead(ANALOG_TWO_PIN));

  display.setCursor(70,42);
  display.print(analogRead(ANALOG_ONE_PIN));
    
  display.println("");
  display.setCursor(0,55);

  if (carteSdIn){
    display.print(" /    -o----  FastLog");
  }
  else{
    display.print(" /    -o----      *  ");
  }
 
  display.setCursor(0,0);
  display.drawLine(0, 50, 128, 50, WHITE);
  display.display();
  display.clearDisplay();
}

void AcceleroScreen(){
  // Screen data and help to calibrate the sensors
  
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.print(" X ");
  display.println(analogRead(ACCELERO_X_PIN));
  display.println("");
  display.println("");
  display.fillRect(0, 12, ((ACCELERO_X_PIN*128)/1024), 6, WHITE);
  
  if (ACCELERO_X_PIN>512){
    display.drawLine(64, 12, 64, 17, BLACK);
  }
  else{
    display.drawLine(64, 12, 64, 17, WHITE);
  }

  //--------------First part of the screen
  
 
  display.println("");
  display.println("");
  display.print("Home      /     Start");
 
  display.setCursor(0,0);
  display.drawLine(0, 50, 128, 50, WHITE);
  display.display();
  display.clearDisplay();
}

void SpeedHallScreen(){
  // Screen data and help to calibrate the sensors
  display.setTextSize(2);
  display.println("");

  display.setTextSize(3);
  display.setTextColor(WHITE);
  display.print("  ");
  display.println(currentSpeed);


  //--------------First part of the screen
  if (digitalRead(HALL_SENSOR_ONE_PIN)){
    display.fillRect(0, 26, 24, 25, WHITE);
  }

  if (digitalRead(HALL_SENSOR_TWO_PIN)){
    display.fillRect(0, 0, 24, 24, WHITE);
  }
  

  display.setTextSize(1);
  display.println("                km/h");
  display.println("");
  display.setCursor(0,55);
  display.print("Set   --o---  FastLog");
 
  display.setCursor(0,0);
  display.drawLine(0, 50, 128, 50, WHITE);
  display.display();
  display.clearDisplay();
}

void OnEstPret(){
  // Ecran de pret à mesurer

    display.drawBitmap(0,0,epd_bitmap_LandingPage, 128, 64, WHITE); //display.drawBitmap(topLeftX, topLeftY, imageData, width, height, color)
    
    display.setTextSize(1);
    display.setTextColor(BLACK);
    display.setCursor(104,6);
    
    if (usbIsConnected()){ // SI une tension de charge est detecté
      display.print(" +");
    }
    else{
      display.fillRect(101, 5, map(100-loggerBatteryLevel(),0,100,0,21), 10, BLACK); // 
    }
    
    display.setTextColor(WHITE);
    display.setCursor(45,22);
    display.setTextSize(2);
    display.print(hour());
    printDigits(minute());
    display.setTextSize(1);
    printDigits(second());

    display.setCursor(45,40);
    display.print(String(day())+"/"+String(month())+"/"+String(year()));
    
//    display.print(usbIsConnected());
//    display.print(" ");
//    display.print(readADC(3));
    
    display.setCursor(14,5);
    if (carteSdIn){
      display.print(String((cardSize-freeSpace)/1000,1));  
      display.print("/");
      display.print(String(cardSize/1000,1)); 
      display.print(" GB");
      display.fillRect(4, 5, 5, int(39*(float(freeSpace/cardSize))), BLACK); // A total of 40 Px tall

    }
    else {
      display.print("No SD");
      display.fillRect(2, 2, 8, 46, BLACK); // A total of 40 Px tall
    }

    display.drawLine(0, 50, 128, 50, WHITE);
    display.setCursor(0,55);

    if (carteSdIn&&usbIsConnected()){
      //display.print("Reset o-----   Format");
      display.print(" USB  o-----  Files  ");
    }
    
    else if (carteSdIn) {
      display.print("  *   o-----  Files  ");
    }
    
   else{
    display.print("  *   o-----      *  ");
   }
    
    display.setCursor(0,0);
    display.display();
    display.clearDisplay();
}

void ErrorOnScreen (const __FlashStringHelper* msg){
  // Ecran de pret à mesurer
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.println("");
    display.println(msg);
    display.setCursor(0,0);
    display.display();
    display.clearDisplay();
}

void DisplayProgressBinToCsv(String CsvName, int percentageDone){
   
   display.drawBitmap(0,0,epd_bitmap_FileConversion, 128, 64, WHITE);
   display.fillRect(4, 4,map(percentageDone,0,100,0,120) ,3 , WHITE);
   display.setTextSize(2);
   display.setTextColor(WHITE);
   display.setCursor(46,17);
   display.print(percentageDone);
   display.println('%');

   display.setCursor(10,55);
   display.setTextSize(1);
   display.println(CsvName);  

   display.display();
   display.clearDisplay();
}

void SlowSavingStats(char binName[]){
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.println("");
  display.println(F("   File Saved as : "));
  display.print("  ");
  display.println(binName);

  display.println("");
  display.println("");
  display.println("");
  display.println("");
  display.print("USB-Dump *        OK");
 
  display.setCursor(0,0);
  display.drawLine(0, 50, 128, 50, WHITE);
  display.display();
  display.clearDisplay();

  while ((!rightButtonPressed)){
        delay(10);
      }      
  ResetButton();
}


void ShowSavingStats(char binName[],int t1, int t0,int overrunTotal){
  // show stats and allow for USB serial dumping the latest file 
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.print(F("File : "));
  display.println(binName);
  display.print(F("Record time:"));
  display.println(0.001*(t1 - t0), 1);
  display.print(F("Samples/sec: "));
  display.println(1000000/LOG_INTERVAL_USEC);
  display.print(F("Overruns: "));
  display.println(overrunTotal);

  display.drawLine(0, 50, 128, 50, WHITE);
  display.fillRect(0, 52,128 ,12 , BLACK);
  display.setCursor(0,55);
  display.setTextColor(WHITE);
  display.print("         *        OK");
  display.setCursor(0,0);
  display.display();

  ResetButton();
  while ((!rightButtonPressed)){
        delay(10);
      }
  ResetButton();
  display.clearDisplay();   
  
}



void AfficheGraph(int dataToScreen[],int temps, int VoieAafficher){
  display.setTextSize(1);
  display.setTextColor(WHITE);

  display.print("Voie : ");
  display.print(VoieAafficher);
  display.print(" t=");
  display.print(temps/1000);
  
  for (uint16_t j = 0; j < 128; j++){ 
    display.drawPixel(j, dataToScreen[j]*64/4096, WHITE);
  }
  
  display.setCursor(0,0);
  display.drawLine(0, 32, 128, 32, WHITE);
  display.display();
  display.clearDisplay();
}
